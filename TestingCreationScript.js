testingUrl = "paste testing url"

class Test {
    constructor(question, correctAnswer, incorrectAnswers) {
        this.question = question;
        this.correctAnswer = correctAnswer;
        this.incorrectAnswers = incorrectAnswers;
    }
}

async function loadTestsFromJSON(url) {
    const res = await fetch(url);
    const data = await res.json();
    return data.map(t => new Test(t.question, t.correctAnswer, t.incorrectAnswers));
}

const tests = await loadTestsFromJSON(testingUrl);

function sleep(ms) { return new Promise(r => setTimeout(r, ms)); }

async function waitForSelector(selector, timeout = 10000) {
    const start = Date.now();
    while (Date.now() - start < timeout) {
        const el = document.querySelector(selector);
        if (el) return el;
        await sleep(200);
    }
    throw new Error("‚è∞ –ù–µ –¥–æ–∂–¥–∞–ª–∏—Å—å —ç–ª–µ–º–µ–Ω—Ç–∞: " + selector);
}

async function waitForClickable(selector, timeout = 10000) {
    const el = await waitForSelector(selector, timeout);
    const start = Date.now();
    while (Date.now() - start < timeout) {
        const rect = el.getBoundingClientRect();
        if (rect.width > 0 && rect.height > 0 && window.getComputedStyle(el).visibility !== 'hidden') return el;
        await sleep(200);
    }
    throw new Error("üö´ –≠–ª–µ–º–µ–Ω—Ç –Ω–µ –∫–ª–∏–∫–∞–±–µ–ª–µ–Ω: " + selector);
}

function safeClick(el) {
    if (!el) return;
    el.scrollIntoView({ block: "center" });
    el.focus({ preventScroll: true });
    el.dispatchEvent(new MouseEvent('mousedown', { bubbles: true }));
    el.dispatchEvent(new MouseEvent('mouseup', { bubbles: true }));
    el.dispatchEvent(new MouseEvent('click', { bubbles: true }));
}

async function createTests(tests) {
    console.log("üöÄ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤...");
    for (let i = 0; i < tests.length; i++) {
        const test = tests[i];
        console.log(`\nüìò [${i + 1}/${tests.length}] –ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞: "${test.question}"`);

        const addBtn = await waitForClickable('[data-testid="add-option-button"]');
        console.log("‚ûï –î–æ–±–∞–≤–ª—è–µ–º –ø—è—Ç—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞...");
        safeClick(addBtn);
        await sleep(700);

        const fields = document.querySelectorAll('[data-testid="tiptap-mini-editor-content"]>div>p');
        if (fields.length < 6) {
            console.error("‚ùå –û—à–∏–±–∫–∞: –Ω–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ–π " + fields.length + ", –æ–∂–∏–¥–∞–ª–æ—Å—å 6");
            return;
        }

        console.log("‚úèÔ∏è –ó–∞–ø–æ–ª–Ω—è–µ–º –ø–æ–ª—è...");
        fields[0].innerText = test.question;
        fields[1].innerText = test.correctAnswer;
        for (let j = 0; j < test.incorrectAnswers.length; j++) {
            fields[j + 2].innerText = test.incorrectAnswers[j];
        }

        console.log("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞...");
        await sleep(1500);

        console.log("‚úÖ –û—Ç–º–µ—á–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç...");
        const correctBtn = await waitForClickable('[data-testid="mcq-editor-mark-answer-0-button"]');
        safeClick(correctBtn);
        await sleep(1000);

        console.log("üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ–ø—Ä–æ—Å...");
        const saveBtn = await waitForClickable('[data-testid="save-question-button"]');
        safeClick(saveBtn);

        console.log("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É –≤–æ–ø—Ä–æ—Å–æ–≤...");
        await waitForClickable('[data-testid="create-new-question-button"]', 15000);
        console.log("üìÑ –í–æ–∑–≤—Ä–∞—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω.");

        if (i < tests.length - 1) {
            console.log("üÜï –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–æ–∑–¥–∞–Ω–∏—é —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞...");
            safeClick(document.querySelector('[data-testid="create-new-question-button"]'));
            await waitForClickable('[data-testid="create-question-type-MCQ"]');
            safeClick(document.querySelector('[data-testid="create-question-type-MCQ"]'));
            await sleep(1500);
        }

        console.log(`‚úÖ –í–æ–ø—Ä–æ—Å [${i + 1}] —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω.`);
        await sleep(400);
    }

    console.log("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã!");
}

createTests(tests);
